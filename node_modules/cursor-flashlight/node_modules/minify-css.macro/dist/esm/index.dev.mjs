import generate from '@babel/generator';
import { createMacro } from 'babel-plugin-macros';

function _ref2(p, node) {
  if (!node.loc) return p;
  p[node.loc.start.line + ":" + node.loc.start.column] = "${" + generate(node).code + "}";
  return p;
}

function _ref3(str) {
  return parseInt(str);
}

function _ref4(str) {
  return parseInt(str);
}

function _ref5(a, b) {
  var [a0, a1] = a.split(':').map(_ref3);
  var [b0, b1] = b.split(':').map(_ref4);

  if (a0 === b0) {
    return a1 - b1;
  }

  return a0 - b0;
}

function _ref6(referencePath) {
  if ('quasi' in referencePath.parentPath.node) {
    var result = referencePath.parentPath.node.quasi.expressions.reduce(_ref2, {});
    referencePath.parentPath.node.quasi.quasis.forEach(node => {
      if (!node.loc) return;
      result[node.loc.start.line + ":" + node.loc.start.column] = node.value.raw.replace(/\s{2,}|\n|\t/g, ' ').replace(/([:;,([{}>~/])\s+/g, '$1').replace(/\s+([;,)\]{}>~/!])/g, '$1').replace(/\/\*\s+/, '/*').replace(/\s+\*\//, '*/');
    });
    var keys = Object.keys(result);
    keys.sort(_ref5);
    referencePath.parentPath.replaceWithSourceString("`" + keys.map(k => result[k]).join('').trim() + "`");
  }
}

var macro = /*#__PURE__*/createMacro(function evaluateMacros(_ref) {
  var {
    references
  } = _ref;
  references.default.forEach(_ref6);
});

export default macro;
//# sourceMappingURL=index.dev.mjs.map
